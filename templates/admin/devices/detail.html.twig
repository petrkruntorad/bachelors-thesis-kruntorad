{% extends 'base.html.twig' %}
{% block body %}
<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Zařízení: {{ device.name }}</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="{{ path(origin) }}">Zařízení</a></li>
                    <li class="breadcrumb-item active">Detail zařízení: {{ device.name }}</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            {% if sensors is defined and sensors is not empty %}
                {% for sensor in sensors %}
                    <div class="col-6">
                        <!-- interactive chart -->
                        <div class="card card-primary card-outline">
                            <div class="card-header">
                                <h3 class="card-title">
                                    <i class="far fa-chart-bar"></i>
                                    Senzor: {{ sensor.hardwareId }}
                                </h3>

                                <div class="card-tools">
                                   <a href="" class="text-danger" title="Odebrat senzor">
                                       <i class="fa-fw fas fa-trash"></i>
                                   </a>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="{{ sensor.hardwareId }}" style="height: 300px;"></div>
                            </div>
                            <!-- /.card-body-->
                        </div>
                        <!-- /.card -->
                    </div>
                    <!-- /.col -->
                {% endfor %}
            {% endif %}
        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->
{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <!-- DataTables -->
    <link rel="stylesheet" href="{{ asset('plugins/datatables-bs4/css/dataTables.bootstrap4.min.css') }}">
    <link rel="stylesheet" href="{{ asset('plugins/datatables-responsive/css/responsive.bootstrap4.min.css') }}">
    <link rel="stylesheet" href="{{ asset('plugins/datatables-buttons/css/buttons.bootstrap4.min.css') }}">
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <!-- DataTables  & Plugins -->
    <script src="{{ asset('plugins/datatables/jquery.dataTables.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-bs4/js/dataTables.bootstrap4.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-responsive/js/dataTables.responsive.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-responsive/js/responsive.bootstrap4.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-buttons/js/dataTables.buttons.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-buttons/js/buttons.bootstrap4.min.js') }}"></script>
    <script src="{{ asset('plugins/jszip/jszip.min.js') }}"></script>
    <script src="{{ asset('plugins/pdfmake/pdfmake.min.js') }}"></script>
    <script src="{{ asset('plugins/pdfmake/vfs_fonts.js') }}"></script>
    <script src="{{ asset('plugins/datatables-buttons/js/buttons.html5.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-buttons/js/buttons.print.min.js') }}"></script>
    <script src="{{ asset('plugins/datatables-buttons/js/buttons.colVis.min.js') }}"></script>
    <!-- FLOT CHARTS -->
    <script src="{{ asset('plugins/flot/jquery.flot.js') }}"></script>
    <!-- FLOT RESIZE PLUGIN - allows the chart to redraw when the window is resized -->
    <script src="{{ asset('plugins/flot/plugins/jquery.flot.resize.js') }}"></script>
    <!-- FLOT PIE PLUGIN - also used to draw donut charts -->
    <script src="{{ asset('plugins/flot/plugins/jquery.flot.pie.js') }}"></script>
    <!-- Page specific script -->
    <script>
        $(function () {
            var totalPoints = 90;
            var pushvalue = 0;
            var sensorData = []

            const chartIds = {{ sensorIds|striptags|raw|nl2br }};
            chartIds.forEach(device=>{
                sensorData[device] = []
                var interactive_plot = $.plot('#'+device+'', [
                        {
                            data: getData(device),
                        }
                    ],
                    {
                        grid: {
                            borderColor: '#f3f3f3',
                            borderWidth: 1,
                            tickColor: '#f3f3f3',
                            clickable: true,
                            hoverable: true,
                            mouseActiveRadius: 15,
                        },
                        series: {
                            shadowSize: 0, // Drawing is faster without shadows
                            color: '#3c8dbc',
                            lines: {
                                lineWidth: 2,
                                show: true,
                                fill: true,
                            },
                            points: {
                                show: true
                            },
                        },
                        yaxis: {
                            min: 0,
                            max: 120,
                            show: true,
                            ticks: 10,
                        },
                        xaxis: {
                            show: true
                        }
                    }
                )

                var updateInterval = 30000 //Fetch data ever x milliseconds
                var realtime       = 'on' //If == to on then fetch data every x seconds. else stop fetching
                function update() {
                    if (pushvalue !== 0)
                    {
                        interactive_plot.setData([getData(device)])
                    }

                    // Since the axes don't change, we don't need to call plot.setupGrid()
                    interactive_plot.draw()

                    if (chartIds.at(-1) === device)
                    {
                        pushvalue = pushvalue + 1;
                    }
                    if (realtime === 'on') {
                        setTimeout(update, updateInterval)
                    }
                }

                //INITIALIZE REALTIME DATA FETCHING
                if (realtime === 'on') {
                    update()
                }
                $("#"+device+"").bind("plothover", function (event, pos, item) {
                    if (item) {
                        if (previousPoint !== item.dataIndex) {

                            previousPoint = item.dataIndex;

                            $("#tooltip").remove();
                            var x = item.datapoint[0].toFixed(2),
                                y = item.datapoint[1].toFixed(2);

                            showTooltip(item.pageX, item.pageY,
                                "Teplota=" + y);
                        }
                    } else {
                        $("#tooltip").remove();
                        previousPoint = null;
                    }
                });
            })

            function getData(sensorId) {
                var sensorDataLength = 0;
                var getDataUrl = "{{ path('sensor_getData',{'id':device.id, 'hardwareId': '_hardwareId_'}) }}/"+pushvalue;
                getDataUrl = getDataUrl.replace("_hardwareId_", sensorId);
                console.log(getDataUrl)
                $.ajax({
                    method: "GET",
                    url: getDataUrl,
                    dataType: "json",
                    async: false,

                    success: function(data) {
                        temperatures = data.temperatures;
                    }
                });
                sensorDataLength = sensorData[sensorId].length - 1
                var res = [];
                if(pushvalue === 0){
                    var pi = 0;

                    while (sensorData[sensorId].length < totalPoints) {
                        var prev = sensorData[sensorId].length > 0 ? sensorData[sensorDataLength] : 50,
                            y = temperatures[pi];


                        pi = pi+1;

                        sensorData[sensorId].push(y);
                    }
                    // Zip the generated y values with the x values


                    for (var i = 0; i < sensorData[sensorId].length; ++i) {

                        if (sensorData[sensorId][i]){
                            res.push([i, sensorData[sensorId][i]])
                        }else {
                            res.push([i, 0])
                        }

                    }
                    return res;
                }else{


                    if (sensorData[sensorId].length > 0)
                        sensorData[sensorId] = sensorData[sensorId].slice(1);

                    sensorDataLength = sensorData[sensorId].length - 1
                    
                    while (sensorData[sensorId].length < totalPoints) {
                        var prev = sensorData[sensorId].length > 0 ? sensorData[sensorId][sensorDataLength] : 50, y = temperatures;
                        sensorData[sensorId].push(y);
                    }
                    // Zip the generated y values with the x values
                    for (var i = 0; i < sensorData[sensorId].length; ++i) {

                        if (sensorData[sensorId][i]){
                            res.push([i, sensorData[sensorId][i]])
                        }else {
                            res.push([i, 0])
                        }

                    }
                    console.log(res)
                    return res;
                }

            }
        })

        function showTooltip(x, y, contents) {
            $("<div id='tooltip'>" + contents + "</div>").css({
                position: "absolute",
                display: "none",
                top: y + 5,
                left: x - 40,
                border: "1px solid #fdd",
                padding: "2px",
                "background-color": "#fee",
                opacity: 0.80
            }).appendTo("body").fadeIn(200);
        }

    </script>
{% endblock %}
